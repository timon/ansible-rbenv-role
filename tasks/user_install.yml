---
- name: checkout rbenv_repo for selected users
  git:
    repo: '{{ rbenv_repo }}'
    dest: '{{ rbenv_root }}'
    version: '{{ rbenv_version }}'
    accept_hostkey: yes
    force: yes
    update: "{{ rbenv_force_update }}"
  with_items: "{{ rbenv_users }}"
  become: yes
  become_user: "{{ item }}"
  ignore_errors: yes

- name: create plugins directory for selected users
  file:
    state: directory
    path: '{{ rbenv_root }}/plugins'
  with_items: "{{ rbenv_users }}"
  become: yes
  become_user: "{{ item }}"
  ignore_errors: yes

- name: install plugins for selected users
  git:
    repo: '{{ item[1].repo }}'
    dest: '{{ rbenv_root }}/plugins/{{ item[1].name }}'
    version: '{{ item[1].version }}'
    accept_hostkey: yes
    force: yes
    update: "{{ item[1].force_update | default(rbenv_force_update) }}"
  with_nested:
    - "{{ rbenv_users }}"
    - "{{ rbenv_plugins }}"
  become: yes
  become_user: "{{ item[0] }}"
  ignore_errors: yes

- name: add rbenv initialization to profile system-wide
  template:
    src: rbenv_user.sh.j2
    dest: /etc/profile.d/rbenv.sh
    owner: root
    group: root
    mode: 0755
  become: yes
  when:
    - ansible_os_family != 'OpenBSD'
    - ansible_os_family != 'Darwin'
    - rbenv_user_profile | default(false)

- name: add rbenv initialization to profile system-wide
  blockinfile:
    block: "{{ lookup('template', 'rbenv_user.sh.j2') }}"
    dest: /etc/profile
  become: yes
  when: ansible_os_family == 'Darwin' and rbenv_user_profile

- name: set default-gems for selected users
  copy:
    src: default-gems
    dest: '{{ rbenv_root }}/default-gems'
  with_items: "{{ rbenv_users }}"
  become: yes
  become_user: "{{ item }}"
  when: default_gems_file is not defined
  ignore_errors: yes

- name: set custom default-gems for selected users
  copy:
    src: '{{ default_gems_file }}'
    dest: '{{ rbenv_root }}/default-gems'
  with_items: "{{ rbenv_users }}"
  become: yes
  become_user: "{{ item }}"
  when: default_gems_file is defined
  ignore_errors: yes

- name: set gemrc for selected users
  copy:
    src: gemrc
    dest: ~/.gemrc
  with_items: "{{ rbenv_users }}"
  become: yes
  become_user: "{{ item }}"
  ignore_errors: yes

- name: set vars for selected users
  copy:
    src: vars
    dest: '{{ rbenv_root }}/vars'
  with_items: "{{ rbenv_users }}"
  become: yes
  become_user: "{{ item }}"
  when: rbenv_set_vars
  ignore_errors: yes

- name: check ruby versions installed for selected users
  shell: $SHELL -lc "{{ rbenv_root }}/bin/rbenv versions --bare"
  with_items: "{{ rbenv_users }}"
  become: yes
  become_user: "{{ item }}"
  register: rbenv_versions
  changed_when: false
  ignore_errors: yes
  failed_when: false
  check_mode: no

- name: install ruby {{ item[1].version }} for selected users
  shell: >
    $SHELL -lc "{{ rbenv_root }}/bin/rbenv install --skip-existing
    {{ item[1].version }}"
  become: yes
  become_user: "{{ item[0] }}"
  with_nested:
    - "{{ rbenv_users }}"
    - "{{ rbenv.rubies }}"
  ignore_errors: yes
  environment: "{{ item[1].env | default({}) | \
                combine({ 'TMPDIR': rbenv_tmpdir }) }}"

- name: check which old rubies to remove for selected users
  set_fact:
    drop_ruby:
      - "{{ item[1] }}"
      - "{{ '{'+item[0].stdout_lines|list|difference(item[2])|join(',')+'}' }}"
  become: yes
  become_user: "{{ item[1] }}"
  with_nested:
    - "{{ ruby_installed.results }}"
    - "{{ rbenv_users }}"
    - "{{ rbenv.rubies|map(attribute='version')|list }}"
  when:
    - rbenv_clean_up
    - item[0].item[0] == item[1]
    - item[0].stdout_lines|list != item[2]
  register: removable_rubies
  ignore_errors: yes

- name: remove old rubies
  shell: >
    $SHELL -lc
    "rm -rf {{ rbenv_root }}/versions/{{ item.ansible_facts.drop_ruby[1] }}"
  changed_when: false
  become: yes
  become_user: "{{ item.ansible_facts.drop_ruby[0] }}"
  with_items: "{{ removable_rubies.results }}"
  when: rbenv_clean_up
  ignore_errors: yes

- name: check if user ruby version is {{ rbenv_default_ruby }}
  shell: >
    $SHELL -lc
    "{{ rbenv_root }}/bin/rbenv version | cut -d ' ' -f 1 |
    grep -Fx '{{ rbenv_default_ruby }}'"
  become: yes
  become_user: "{{ item }}"
  with_items: "{{ rbenv_users }}"
  register: ruby_selected
  changed_when: false
  ignore_errors: yes
  failed_when: false
  check_mode: no

- name: set ruby {{ rbenv_default_ruby }} for selected users
  shell: >
    $SHELL -lc
    "{{ rbenv_root }}/bin/rbenv global {{ rbenv_default_ruby }} && rbenv rehash"
  become: yes
  become_user: "{{ item[1] }}"
  with_together:
    - "{{ ruby_selected.results }}"
    - "{{ rbenv_users }}"
  when: item[0].rc != 0
  ignore_errors: yes
